import numpy as np
from tkinter import Tk, Canvas

# Updated dimensions and styles
board_size = 600
symbol_dim = (board_size / 4)  # Slightly larger symbols
thickness_of_symbol = 10  # Thinner lines for a sleek look
color_X = '#FF5733'  # A vibrant orange
color_O = '#33C1FF'  # A bright blue
color_Green = '#4CD137'  # A more vivid green
line_color = '#555555'  # Dark grey for the grid lines
line_thickness = 5  # Thinner grid lines

class TicTacToe:
    def __init__(self):
        self.init_window()
        self.init_game_state()
        self.init_board()

    def init_window(self):
        self.window = Tk()
        self.window.title('Tic-Tac-Toe Enhanced')
        self.canvas = Canvas(self.window, width=board_size, height=board_size, bg='white')  # Added background color
        self.canvas.pack()
        self.window.bind('<Button-1>', self.on_click)

    def init_game_state(self):
        self.turn_X = True
        self.start_X = True
        self.board = np.zeros((3, 3))
        self.reset = False
        self.game_over = False
        self.tie_game = False
        self.win_X = False
        self.win_O = False
        self.score_X = 0
        self.score_O = 0
        self.score_tie = 0

    def init_board(self):
        # Drawing updated grid lines with new colors and thickness
        for i in range(1, 3):
            self.canvas.create_line(i * board_size / 3, 0, i * board_size / 3, board_size, fill=line_color, width=line_thickness)
            self.canvas.create_line(0, i * board_size / 3, board_size, i * board_size / 3, fill=line_color, width=line_thickness)

    def main_loop(self):
        self.window.mainloop()

    def on_click(self, event):
        if self.reset:
            self.canvas.delete("all")
            self.init_game_state()
            self.init_board()
        else:
            self.process_click(event.x, event.y)
            if self.check_game_over():
                self.display_winner()

    def process_click(self, x, y):
        pos = self.get_logical_position([x, y])
        if not self.is_occupied(pos):
            self.draw_symbol(pos)
            self.update_board(pos)
            self.turn_X = not self.turn_X

    def draw_symbol(self, pos):
        center = (board_size / 3) * pos + board_size / 6
        if self.turn_X:
            # X symbol with a different style
            self.canvas.create_line(center[0] - symbol_dim / 2, center[1] - symbol_dim / 2,
                                    center[0] + symbol_dim / 2, center[1] + symbol_dim / 2, width=thickness_of_symbol, fill=color_X)
            self.canvas.create_line(center[0] - symbol_dim / 2, center[1] + symbol_dim / 2,
                                    center[0] + symbol_dim / 2, center[1] - symbol_dim / 2, width=thickness_of_symbol, fill=color_X)
        else:
            # O symbol with a different style
            self.canvas.create_oval(center[0] - symbol_dim / 2, center[1] - symbol_dim / 2,
                                    center[0] + symbol_dim / 2, center[1] + symbol_dim / 2, width=thickness_of_symbol, outline=color_O)

    def update_board(self, pos):
        self.board[pos[0], pos[1]] = -1 if self.turn_X else 1

    def get_logical_position(self, pos):
        return np.array([pos[0] // (board_size / 3), pos[1] // (board_size / 3)], dtype=int)

    def is_occupied(self, pos):
        return self.board[pos[0], pos[1]] != 0

    def check_game_over(self):
        # Implementation for checking win or tie conditions
        return False  # Placeholder for actual game logic

    def display_winner(self):
        # Implementation for displaying the winner
        pass

if __name__ == "__main__":
    game = TicTacToe()
    game.main_loop()
